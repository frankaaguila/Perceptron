{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\src\\\\components\\\\Container\\\\Canvas.js\";\nimport React, { Component } from 'react';\nimport { ScatterChart, XAxis, YAxis, CartesianGrid, Tooltip, Scatter, Cell, ResponsiveContainer } from \"recharts\";\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Canvas, _Component);\n\n  function Canvas() {\n    _classCallCheck(this, Canvas);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Canvas).apply(this, arguments));\n  }\n\n  _createClass(Canvas, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"canvasContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        },\n        __self: this\n      }, React.createElement(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(ScatterChart, {\n        margin: {\n          top: 20,\n          right: 20,\n          bottom: 0,\n          left: 0\n        },\n        onClick: this.props.addPoints,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, React.createElement(XAxis, {\n        type: \"number\",\n        dataKey: 'x',\n        name: \"x\",\n        domain: [-10, 10],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        type: \"number\",\n        dataKey: 'y',\n        name: \"y\",\n        domain: [-10, 10],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }), React.createElement(CartesianGrid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        cursor: {\n          strokeDasharray: '3 3'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }), React.createElement(Scatter, {\n        name: \"Random\",\n        data: this.props.randomLine,\n        fill: \"green\",\n        line: {\n          stroke: 'green',\n          strokeWidth: 3\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }), React.createElement(Scatter, {\n        name: \"Background\",\n        data: this.props.background,\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, this.props.background.map(function (entry, index) {\n        return React.createElement(Cell, {\n          key: \"cell2-\".concat(index),\n          fill: entry.t === 1 ? \"#b7b7b7\" : \"#dbdbdb\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        });\n      })), React.createElement(Scatter, {\n        name: \"Graph\",\n        data: this.props.points,\n        fill: \"#8884d8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, this.props.points.map(function (entry, index) {\n        return React.createElement(Cell, {\n          key: \"cell-\".concat(index),\n          fill: entry.t === 1 ? \"#2196F3\" : \"red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n      })), React.createElement(Scatter, {\n        name: \"Result\",\n        data: this.props.resultLine,\n        fill: \"lime\",\n        line: {\n          stroke: 'lime',\n          strokeWidth: 3\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Canvas;\n}(Component);\n\nexport default Canvas;","map":{"version":3,"sources":["C:\\Users\\Frank\\Documents\\Cucei\\perceptronReact\\src\\components\\Container\\Canvas.js"],"names":["React","Component","ScatterChart","XAxis","YAxis","CartesianGrid","Tooltip","Scatter","Cell","ResponsiveContainer","Canvas","top","right","bottom","left","props","addPoints","strokeDasharray","randomLine","stroke","strokeWidth","background","map","entry","index","t","points","resultLine"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ScatterChart, XAxis, YAxis, CartesianGrid, Tooltip, Scatter, Cell, ResponsiveContainer } from \"recharts\";\r\n\r\nclass Canvas extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"canvasContainer\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <ScatterChart margin={{top: 20, right: 20, bottom: 0, left: 0}} onClick={this.props.addPoints}>\r\n                        <XAxis type=\"number\" dataKey={'x'} name='x' domain={[-10,10]}/>\r\n                        <YAxis type=\"number\" dataKey={'y'} name='y' domain={[-10,10]}/>\r\n                        <CartesianGrid /> \r\n                        <Tooltip cursor={{strokeDasharray: '3 3'}}/>\r\n                        <Scatter name='Random' data={this.props.randomLine} fill='green' line={{stroke: 'green', strokeWidth: 3}} />\r\n                        <Scatter name='Background' data={this.props.background} fill='#8884d8' >\r\n                            {\r\n                                this.props.background.map((entry, index) => {\r\n                                    return <Cell key={`cell2-${index}`} fill={entry.t===1 ? \"#b7b7b7\" : \"#dbdbdb\"} />\r\n                                })\r\n                            }\r\n                        </Scatter>\r\n                        <Scatter name='Graph' data={this.props.points} fill='#8884d8'>\r\n                            {\r\n                                this.props.points.map((entry, index) => {\r\n                                    return <Cell key={`cell-${index}`} fill={entry.t===1 ? \"#2196F3\" : \"red\"} />\r\n                                })\r\n                            }\r\n                        </Scatter>\r\n                        <Scatter name='Result' data={this.props.resultLine} fill='lime' line={{stroke: 'lime', strokeWidth: 3}} />\r\n                    </ScatterChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}