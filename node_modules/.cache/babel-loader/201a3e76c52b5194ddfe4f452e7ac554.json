{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { ActivationFunction } from \"./Perceptron\";\nexport var getRandomWeights = function getRandomWeights(cant) {\n  var w = [];\n\n  for (var i = 0; i < cant; i++) {\n    w.push(Math.floor(5 - Math.random() * 10));\n  }\n\n  return w;\n};\nexport var convertPointsToArray = function convertPointsToArray(points) {\n  var x = [];\n  points.forEach(function (p) {\n    x.push([p.x, p.y, p.t]);\n  });\n  return x;\n};\nexport var getLine = function getLine(w) {\n  var _w = _slicedToArray(w, 3),\n      A = _w[0],\n      B = _w[1],\n      C = _w[2];\n\n  var points = [];\n  var y = 0;\n\n  for (var x = -10; x <= 10; x += 0.1) {\n    y = (-A * x - C) / B;\n\n    if (y >= -10 && y <= 10) {\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n  }\n\n  if (points.length < 2) {\n    return [];\n  }\n\n  return [points[0], points[points.length - 1]];\n};\nexport var getBackgroundPoints = function getBackgroundPoints(w) {\n  var points = [];\n  var b = w.pop();\n\n  for (var x = -10; x <= 10; x += 1) {\n    for (var y = -10; y <= 10; y += 1) {\n      points.push({\n        x: x,\n        y: y,\n        t: Number(ActivationFunction([x, y], w, b))\n      });\n    }\n  }\n\n  return points;\n};","map":{"version":3,"sources":["C:\\Users\\Frank\\Google Drive\\Cucei\\11vo Semestre\\Inteligencia Artificial 2\\PerceptrÃ³n\\ejemplo\\src\\src\\functions\\Helpers.js"],"names":["ActivationFunction","getRandomWeights","cant","w","i","push","Math","floor","random","convertPointsToArray","points","x","forEach","p","y","t","getLine","A","B","C","length","getBackgroundPoints","b","pop","Number"],"mappings":";AAAA,SAASA,kBAAT,QAAmC,cAAnC;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACtC,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,IAAf,EAAqBE,CAAC,EAAtB,EAAyB;AACrBD,IAAAA,CAAC,CAACE,IAAF,CAAOC,IAAI,CAACC,KAAL,CAAW,IAAGD,IAAI,CAACE,MAAL,KAAgB,EAA9B,CAAP;AACH;;AACD,SAAOL,CAAP;AACH,CANM;AAQP,OAAO,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAAY;AAC5C,MAAIC,CAAC,GAAG,EAAR;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAACC,CAAD,EAAO;AAClBF,IAAAA,CAAC,CAACN,IAAF,CAAO,CAACQ,CAAC,CAACF,CAAH,EAAME,CAAC,CAACC,CAAR,EAAWD,CAAC,CAACE,CAAb,CAAP;AACH,GAFD;AAGA,SAAOJ,CAAP;AACH,CANM;AAQP,OAAO,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACb,CAAD,EAAO;AAAA,0BACRA,CADQ;AAAA,MACnBc,CADmB;AAAA,MAChBC,CADgB;AAAA,MACbC,CADa;;AAE1B,MAAIT,MAAM,GAAG,EAAb;AACA,MAAII,CAAC,GAAG,CAAR;;AACA,OAAI,IAAIH,CAAC,GAAC,CAAC,EAAX,EAAeA,CAAC,IAAE,EAAlB,EAAsBA,CAAC,IAAI,GAA3B,EAA+B;AAC3BG,IAAAA,CAAC,GAAG,CAAE,CAACG,CAAD,GAAGN,CAAJ,GAAOQ,CAAR,IAAWD,CAAf;;AACA,QAAGJ,CAAC,IAAI,CAAC,EAAN,IAAYA,CAAC,IAAI,EAApB,EAAuB;AACnBJ,MAAAA,MAAM,CAACL,IAAP,CAAY;AAACM,QAAAA,CAAC,EAADA,CAAD;AAAIG,QAAAA,CAAC,EAADA;AAAJ,OAAZ;AACH;AACJ;;AACD,MAAGJ,MAAM,CAACU,MAAP,GAAc,CAAjB,EAAmB;AACf,WAAO,EAAP;AACH;;AACD,SAAO,CAACV,MAAM,CAAC,CAAD,CAAP,EAAWA,MAAM,CAACA,MAAM,CAACU,MAAP,GAAc,CAAf,CAAjB,CAAP;AACH,CAdM;AAgBP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAClB,CAAD,EAAO;AACtC,MAAIO,MAAM,GAAG,EAAb;AACA,MAAIY,CAAC,GAAGnB,CAAC,CAACoB,GAAF,EAAR;;AACA,OAAI,IAAIZ,CAAC,GAAC,CAAC,EAAX,EAAeA,CAAC,IAAE,EAAlB,EAAsBA,CAAC,IAAE,CAAzB,EAA2B;AACvB,SAAI,IAAIG,CAAC,GAAC,CAAC,EAAX,EAAeA,CAAC,IAAE,EAAlB,EAAsBA,CAAC,IAAE,CAAzB,EAA2B;AACvBJ,MAAAA,MAAM,CAACL,IAAP,CAAY;AACRM,QAAAA,CAAC,EAADA,CADQ;AAERG,QAAAA,CAAC,EAADA,CAFQ;AAGRC,QAAAA,CAAC,EAAES,MAAM,CAACxB,kBAAkB,CAAC,CAACW,CAAD,EAAGG,CAAH,CAAD,EAAQX,CAAR,EAAWmB,CAAX,CAAnB;AAHD,OAAZ;AAKH;AACJ;;AACD,SAAOZ,MAAP;AACH,CAbM","sourcesContent":["import { ActivationFunction } from \"./Perceptron\";\r\n\r\nexport const getRandomWeights = (cant) => {\r\n    let w = [];\r\n    for(let i=0; i<cant; i++){\r\n        w.push(Math.floor(5-(Math.random() * 10)));\r\n    }\r\n    return w;\r\n}\r\n\r\nexport const convertPointsToArray = (points) => {\r\n    let x = [];\r\n    points.forEach((p) => {\r\n        x.push([p.x, p.y, p.t]);\r\n    });\r\n    return x;\r\n}\r\n\r\nexport const getLine = (w) => {\r\n    const [A, B, C] = w;\r\n    let points = []\r\n    let y = 0;\r\n    for(let x=-10; x<=10; x += 0.1){\r\n        y = ((-A*x)-C)/B\r\n        if(y >= -10 && y <= 10){\r\n            points.push({x, y})\r\n        }\r\n    }\r\n    if(points.length<2){\r\n        return []\r\n    }\r\n    return [points[0],points[points.length-1]]\r\n}\r\n\r\nexport const getBackgroundPoints = (w) => {\r\n    let points = []\r\n    let b = w.pop()\r\n    for(let x=-10; x<=10; x+=1){\r\n        for(let y=-10; y<=10; y+=1){\r\n            points.push({\r\n                x,\r\n                y,\r\n                t: Number(ActivationFunction([x,y], w, b))\r\n            })\r\n        }\r\n    }\r\n    return points\r\n}"]},"metadata":{},"sourceType":"module"}