{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { ActivationFunction } from \"./Perceptron\";\nvar MAX_SIZE = 10;\nexport var getRandomWeights = function getRandomWeights(cant) {\n  var w = [];\n\n  for (var i = 0; i < cant; i++) {\n    w.push(Math.floor(5 - Math.random() * 10));\n  }\n\n  return w;\n};\nexport var convertPointsToArray = function convertPointsToArray(points) {\n  var x = [];\n  points.forEach(function (p) {\n    x.push([p.x, p.y, p.t]);\n  });\n  return x;\n};\nexport var getLine = function getLine(w) {\n  var _w = _slicedToArray(w, 3),\n      A = _w[0],\n      B = _w[1],\n      C = _w[2];\n\n  var points = [];\n  var y = 0;\n\n  for (var x = -MAX_SIZE; x <= MAX_SIZE; x += 0.1) {\n    y = (-A * x - C) / B;\n    if (y >= -MAX_SIZE && y <= MAX_SIZE) points.push({\n      x: x,\n      y: y\n    });\n  }\n\n  if (points.length < 2) return [];\n  return [points[0], points[points.length - 1]];\n};\nexport var getBackgroundPoints = function getBackgroundPoints(w) {\n  var points = [];\n  var b = w.pop();\n\n  for (var x = -MAX_SIZE; x <= MAX_SIZE; x += 1) {\n    for (var y = -MAX_SIZE; y <= MAX_SIZE; y += 1) {\n      points.push({\n        x: x,\n        y: y,\n        t: Number(ActivationFunction([x, y], w, b))\n      });\n    }\n  }\n\n  return points;\n};","map":{"version":3,"sources":["C:\\Users\\Frank\\Documents\\Cucei\\perceptronReact\\src\\functions\\Helpers.js"],"names":["ActivationFunction","MAX_SIZE","getRandomWeights","cant","w","i","push","Math","floor","random","convertPointsToArray","points","x","forEach","p","y","t","getLine","A","B","C","length","getBackgroundPoints","b","pop","Number"],"mappings":";AAAA,SAASA,kBAAT,QAAmC,cAAnC;AAEA,IAAMC,QAAQ,GAAG,EAAjB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACtC,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,IAAf,EAAqBE,CAAC,EAAtB;AAAyBD,IAAAA,CAAC,CAACE,IAAF,CAAOC,IAAI,CAACC,KAAL,CAAW,IAAGD,IAAI,CAACE,MAAL,KAAgB,EAA9B,CAAP;AAAzB;;AACA,SAAOL,CAAP;AACH,CAJM;AAMP,OAAO,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAAY;AAC5C,MAAIC,CAAC,GAAG,EAAR;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAACC,CAAD,EAAO;AAACF,IAAAA,CAAC,CAACN,IAAF,CAAO,CAACQ,CAAC,CAACF,CAAH,EAAME,CAAC,CAACC,CAAR,EAAWD,CAAC,CAACE,CAAb,CAAP;AAAwB,GAA/C;AACA,SAAOJ,CAAP;AACH,CAJM;AAMP,OAAO,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACb,CAAD,EAAO;AAAA,0BACRA,CADQ;AAAA,MACnBc,CADmB;AAAA,MAChBC,CADgB;AAAA,MACbC,CADa;;AAE1B,MAAIT,MAAM,GAAG,EAAb;AACA,MAAII,CAAC,GAAG,CAAR;;AACA,OAAI,IAAIH,CAAC,GAAC,CAACX,QAAX,EAAqBW,CAAC,IAAEX,QAAxB,EAAkCW,CAAC,IAAI,GAAvC,EAA2C;AACvCG,IAAAA,CAAC,GAAG,CAAE,CAACG,CAAD,GAAGN,CAAJ,GAAOQ,CAAR,IAAWD,CAAf;AACA,QAAGJ,CAAC,IAAI,CAACd,QAAN,IAAkBc,CAAC,IAAId,QAA1B,EAAmCU,MAAM,CAACL,IAAP,CAAY;AAACM,MAAAA,CAAC,EAADA,CAAD;AAAIG,MAAAA,CAAC,EAADA;AAAJ,KAAZ;AACtC;;AACD,MAAGJ,MAAM,CAACU,MAAP,GAAc,CAAjB,EAAoB,OAAO,EAAP;AAEpB,SAAO,CAACV,MAAM,CAAC,CAAD,CAAP,EAAWA,MAAM,CAACA,MAAM,CAACU,MAAP,GAAc,CAAf,CAAjB,CAAP;AACH,CAXM;AAaP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAClB,CAAD,EAAO;AACtC,MAAIO,MAAM,GAAG,EAAb;AACA,MAAIY,CAAC,GAAGnB,CAAC,CAACoB,GAAF,EAAR;;AACA,OAAI,IAAIZ,CAAC,GAAC,CAACX,QAAX,EAAqBW,CAAC,IAAEX,QAAxB,EAAkCW,CAAC,IAAE,CAArC,EAAuC;AACnC,SAAI,IAAIG,CAAC,GAAC,CAACd,QAAX,EAAqBc,CAAC,IAAEd,QAAxB,EAAkCc,CAAC,IAAE,CAArC,EAAuC;AACnCJ,MAAAA,MAAM,CAACL,IAAP,CAAY;AAACM,QAAAA,CAAC,EAADA,CAAD;AAAIG,QAAAA,CAAC,EAADA,CAAJ;AACRC,QAAAA,CAAC,EAAES,MAAM,CAACzB,kBAAkB,CAAC,CAACY,CAAD,EAAGG,CAAH,CAAD,EAAQX,CAAR,EAAWmB,CAAX,CAAnB;AADD,OAAZ;AAGH;AACJ;;AACD,SAAOZ,MAAP;AACH,CAXM","sourcesContent":["import { ActivationFunction } from \"./Perceptron\";\r\n\r\nconst MAX_SIZE = 10;\r\n\r\nexport const getRandomWeights = (cant) => {\r\n    let w = [];\r\n    for(let i=0; i<cant; i++)w.push(Math.floor(5-(Math.random() * 10)));\r\n    return w;\r\n}\r\n\r\nexport const convertPointsToArray = (points) => {\r\n    let x = [];\r\n    points.forEach((p) => {x.push([p.x, p.y, p.t])});\r\n    return x;\r\n}\r\n\r\nexport const getLine = (w) => {\r\n    const [A, B, C] = w;\r\n    let points = []\r\n    let y = 0;\r\n    for(let x=-MAX_SIZE; x<=MAX_SIZE; x += 0.1){\r\n        y = ((-A*x)-C)/B\r\n        if(y >= -MAX_SIZE && y <= MAX_SIZE)points.push({x, y})\r\n    }\r\n    if(points.length<2) return []\r\n\r\n    return [points[0],points[points.length-1]]\r\n}\r\n\r\nexport const getBackgroundPoints = (w) => {\r\n    let points = []\r\n    let b = w.pop()\r\n    for(let x=-MAX_SIZE; x<=MAX_SIZE; x+=1){\r\n        for(let y=-MAX_SIZE; y<=MAX_SIZE; y+=1){\r\n            points.push({x, y,\r\n                t: Number(ActivationFunction([x,y], w, b))\r\n            })\r\n        }\r\n    }\r\n    return points\r\n}"]},"metadata":{},"sourceType":"module"}