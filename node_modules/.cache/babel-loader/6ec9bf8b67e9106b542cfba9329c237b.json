{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Frank\\\\Google Drive\\\\Cucei\\\\11vo Semestre\\\\Inteligencia Artificial 2\\\\Perceptr\\xF3n\\\\ejemplo\\\\src\\\\src\\\\components\\\\Container\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport Graphic from './Graphic';\nimport Canvas from './Canvas';\nimport CanvasControllers from './CanvasControllers';\nimport { getRandomWeights, convertPointsToArray, getLine, getBackgroundPoints } from '../../functions/Helpers';\nimport { Perceptron } from '../../functions/Perceptron';\n\nvar Container =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Container, _Component);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props));\n\n    _this.addPoints = function (e) {\n      if (!_this.state.finished) {\n        var newPoints = _this.state.points;\n        var value = _this.state.pointType === \"positive\";\n\n        if (e) {\n          if (e.xValue && e.yValue) {\n            newPoints.push({\n              x: e.xValue,\n              y: e.yValue,\n              t: Number(value)\n            });\n\n            _this.setState({\n              points: newPoints\n            });\n          }\n        }\n      }\n    };\n\n    _this.togglePointsType = function (e) {\n      if (!_this.state.finished) {\n        _this.setState({\n          pointType: e.target.id\n        });\n      }\n    };\n\n    _this.handleSlide = function (e) {\n      if (!_this.state.finished) {\n        _this.setState({\n          n: e.target.value\n        });\n      }\n    };\n\n    _this.handleEpocas = function (e) {\n      if (!_this.state.finished) {\n        _this.setState({\n          epocas: e.target.value\n        });\n      }\n    };\n\n    _this.handleGenerateWeights = function () {\n      if (!_this.state.finished) {\n        var weights = [];\n        var randomLine = [];\n\n        do {\n          weights = getRandomWeights(3);\n          randomLine = getLine(weights);\n        } while (!randomLine.length);\n\n        _this.setState({\n          w: weights,\n          randomLine: randomLine\n        });\n      }\n    };\n\n    _this.handlePerceptron = function () {\n      if (!_this.state.finished) {\n        var w = _this.state.w;\n        var b = w.pop();\n        var perceptronData = {\n          w: w,\n          b: b,\n          n: Number(_this.state.n),\n          x: convertPointsToArray(_this.state.points),\n          epocas: Number(_this.state.epocas)\n        };\n\n        if (!perceptronData.w.length || !perceptronData.x.length) {\n          alert(\"Faltan datos\");\n        } else {\n          var _Perceptron = Perceptron(perceptronData),\n              _Perceptron2 = _slicedToArray(_Perceptron, 2),\n              result = _Perceptron2[0],\n              errorData = _Perceptron2[1];\n\n          var resultLine = getLine(result);\n          var backgroundPoints = getBackgroundPoints(result);\n\n          _this.setState({\n            result: result,\n            resultLine: resultLine,\n            backgroundPoints: backgroundPoints,\n            errorData: errorData,\n            finished: true\n          });\n        }\n      } else {\n        document.location.reload();\n      }\n    };\n\n    _this.state = {\n      pointType: \"positive\",\n      randomLine: [],\n      finished: false,\n      points: [],\n      n: 0.5,\n      epocas: 1000,\n      w: [],\n      result: [],\n      resultLine: [],\n      backgroundPoints: [],\n      errorData: []\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"Container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        sm: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Perceptr\\xF3n\"))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Canvas, {\n        points: this.state.points,\n        randomLine: this.state.randomLine,\n        addPoints: this.addPoints,\n        resultLine: this.state.resultLine,\n        background: this.state.backgroundPoints,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xs: 12,\n        sm: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(CanvasControllers, {\n        togglePointsType: this.togglePointsType,\n        handleSlide: this.handleSlide,\n        handleEpocas: this.handleEpocas,\n        n: this.state.n,\n        epocas: this.state.epocas,\n        handleGenerateWeights: this.handleGenerateWeights,\n        handlePerceptron: this.handlePerceptron,\n        reload: this.state.finished,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Graphic, {\n        data: this.state.errorData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default Container;","map":{"version":3,"sources":["C:\\Users\\Frank\\Google Drive\\Cucei\\11vo Semestre\\Inteligencia Artificial 2\\Perceptr√≥n\\ejemplo\\src\\src\\components\\Container\\index.js"],"names":["React","Component","Grid","Row","Col","Graphic","Canvas","CanvasControllers","getRandomWeights","convertPointsToArray","getLine","getBackgroundPoints","Perceptron","Container","props","addPoints","e","state","finished","newPoints","points","value","pointType","xValue","yValue","push","x","y","t","Number","setState","togglePointsType","target","id","handleSlide","n","handleEpocas","epocas","handleGenerateWeights","weights","randomLine","length","w","handlePerceptron","b","pop","perceptronData","alert","result","errorData","resultLine","backgroundPoints","document","location","reload"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Row, Col } from 'react-flexbox-grid';\r\nimport Graphic from './Graphic';\r\nimport Canvas from './Canvas';\r\nimport CanvasControllers from './CanvasControllers';\r\nimport { getRandomWeights, convertPointsToArray, getLine, getBackgroundPoints } from '../../functions/Helpers';\r\nimport { Perceptron } from '../../functions/Perceptron';\r\n\r\nclass Container extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pointType: \"positive\",\r\n            randomLine: [],\r\n            finished: false,\r\n            points: [],\r\n            n: 0.5,\r\n            epocas: 1000,\r\n            w: [],\r\n            result: [],\r\n            resultLine: [],\r\n            backgroundPoints: [],\r\n            errorData: []\r\n        }\r\n    }\r\n\r\n    addPoints = (e) => {\r\n        if(!this.state.finished){\r\n            let newPoints = this.state.points;\r\n            let value = this.state.pointType === \"positive\"\r\n            if(e){\r\n                if(e.xValue && e.yValue){\r\n                    newPoints.push({x: e.xValue, y: e.yValue, t: Number(value) });\r\n                    this.setState({\r\n                        points: newPoints\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    togglePointsType = (e) => {\r\n        if(!this.state.finished){\r\n            this.setState({\r\n                pointType: e.target.id\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSlide = (e) => {\r\n        if(!this.state.finished){\r\n            this.setState({\r\n                n: e.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEpocas = (e) => {\r\n        if(!this.state.finished){\r\n            this.setState({\r\n                epocas: e.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    handleGenerateWeights = () => {\r\n        if(!this.state.finished){\r\n            let weights = []\r\n            let randomLine = []\r\n            do{\r\n                weights = getRandomWeights(3);\r\n                randomLine = getLine(weights);\r\n            }while(!randomLine.length)\r\n            this.setState({\r\n                w: weights,\r\n                randomLine\r\n            })\r\n        }\r\n    }\r\n\r\n    handlePerceptron = () => {\r\n        if(!this.state.finished){\r\n            let w = this.state.w;\r\n            let b = w.pop()\r\n            let perceptronData = {\r\n                w,\r\n                b,\r\n                n: Number(this.state.n),\r\n                x: convertPointsToArray(this.state.points),\r\n                epocas: Number(this.state.epocas),\r\n            }\r\n            if(!perceptronData.w.length || !perceptronData.x.length){\r\n                alert(\"Faltan datos\");\r\n            }\r\n            else{\r\n                let [result, errorData] = Perceptron(perceptronData);\r\n                let resultLine = getLine(result);\r\n                let backgroundPoints = getBackgroundPoints(result);\r\n                this.setState({\r\n                    result,\r\n                    resultLine,\r\n                    backgroundPoints,\r\n                    errorData,\r\n                    finished: true,\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            document.location.reload();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Container\">\r\n                <Grid>\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <div className=\"title\">Perceptr√≥n</div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} sm={8}>\r\n                            <Canvas\r\n                                points={this.state.points}\r\n                                randomLine={this.state.randomLine}\r\n                                addPoints={this.addPoints}\r\n                                resultLine={this.state.resultLine}\r\n                                background={this.state.backgroundPoints}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={12} sm={4}>\r\n                            <CanvasControllers\r\n                                togglePointsType={this.togglePointsType}\r\n                                handleSlide={this.handleSlide}\r\n                                handleEpocas={this.handleEpocas}\r\n                                n={this.state.n}\r\n                                epocas={this.state.epocas}\r\n                                handleGenerateWeights={this.handleGenerateWeights}\r\n                                handlePerceptron={this.handlePerceptron}\r\n                                reload={this.state.finished}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <Graphic data={this.state.errorData}/>\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Container;"]},"metadata":{},"sourceType":"module"}