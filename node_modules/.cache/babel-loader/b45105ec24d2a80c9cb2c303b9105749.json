{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Frank\\\\Documents\\\\Cucei\\\\perceptronReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nexport var ActivationFunction = function ActivationFunction(x, w, b) {\n  var z = 0;\n\n  for (var i in w) {\n    z += w[i] * x[i];\n  }\n\n  z += b;\n  return z > 0;\n};\n\nvar getError = function getError(t, a) {\n  return t - a;\n};\n\nvar updateWeights = function updateWeights(w, b, x, error, n) {\n  for (var i in w) {\n    w[i] = w[i] + n * error * x[i];\n  }\n\n  b += error * n;\n  return [w, b];\n};\n\nexport var Perceptron = function Perceptron(_ref) {\n  var w = _ref.w,\n      b = _ref.b,\n      n = _ref.n,\n      x = _ref.x,\n      epocas = _ref.epocas;\n  var done = false;\n  var z = 0;\n  var error = 0;\n  var errorData = [];\n  var epoca = 0;\n\n  while (!done && epoca < epocas) {\n    done = true;\n\n    for (var i in x) {\n      z = ActivationFunction(x[i], w, b);\n      error = getError(x[i][x[i].length - 1], Number(z));\n\n      if (error !== 0) {\n        done = false;\n\n        var _updateWeights = updateWeights(w, b, x[i], error, n);\n\n        var _updateWeights2 = _slicedToArray(_updateWeights, 2);\n\n        w = _updateWeights2[0];\n        b = _updateWeights2[1];\n      }\n    }\n\n    errorData.push({\n      epoca: epoca,\n      error: error\n    });\n    epoca++;\n  }\n\n  w.push(b);\n  return [w, errorData];\n};","map":{"version":3,"sources":["C:\\Users\\Frank\\Documents\\Cucei\\perceptronReact\\src\\functions\\Perceptron.js"],"names":["ActivationFunction","x","w","b","z","i","getError","t","a","updateWeights","error","n","Perceptron","epocas","done","errorData","epoca","length","Number","push"],"mappings":";AAAA,OAAO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAa;AAC3C,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAI,IAAIC,CAAR,IAAaH,CAAb,EAAe;AACXE,IAAAA,CAAC,IAAIF,CAAC,CAACG,CAAD,CAAD,GAAOJ,CAAC,CAACI,CAAD,CAAb;AACH;;AACDD,EAAAA,CAAC,IAAID,CAAL;AACA,SAAOC,CAAC,GAAC,CAAT;AACH,CAPM;;AASP,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAIC,CAAJ,EAAU;AACvB,SAAQD,CAAC,GAACC,CAAV;AACH,CAFD;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACP,CAAD,EAAIC,CAAJ,EAAOF,CAAP,EAAUS,KAAV,EAAiBC,CAAjB,EAAuB;AACzC,OAAI,IAAIN,CAAR,IAAaH,CAAb,EAAe;AACXA,IAAAA,CAAC,CAACG,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAD,GAAQM,CAAC,GAAGD,KAAJ,GAAYT,CAAC,CAACI,CAAD,CAA5B;AACH;;AACDF,EAAAA,CAAC,IAAKO,KAAK,GAAGC,CAAd;AACA,SAAO,CAACT,CAAD,EAAIC,CAAJ,CAAP;AACH,CAND;;AAQA,OAAO,IAAMS,UAAU,GAAG,SAAbA,UAAa,OAA0B;AAAA,MAAxBV,CAAwB,QAAxBA,CAAwB;AAAA,MAArBC,CAAqB,QAArBA,CAAqB;AAAA,MAAlBQ,CAAkB,QAAlBA,CAAkB;AAAA,MAAfV,CAAe,QAAfA,CAAe;AAAA,MAAZY,MAAY,QAAZA,MAAY;AAChD,MAAIC,IAAI,GAAG,KAAX;AACA,MAAIV,CAAC,GAAG,CAAR;AACA,MAAIM,KAAK,GAAG,CAAZ;AACA,MAAIK,SAAS,GAAG,EAAhB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAM,CAACF,IAAD,IAASE,KAAK,GAAGH,MAAvB,EAA8B;AAC1BC,IAAAA,IAAI,GAAG,IAAP;;AACA,SAAI,IAAIT,CAAR,IAAaJ,CAAb,EAAe;AACXG,MAAAA,CAAC,GAAGJ,kBAAkB,CAACC,CAAC,CAACI,CAAD,CAAF,EAAOH,CAAP,EAAUC,CAAV,CAAtB;AACAO,MAAAA,KAAK,GAAGJ,QAAQ,CAACL,CAAC,CAACI,CAAD,CAAD,CAAKJ,CAAC,CAACI,CAAD,CAAD,CAAKY,MAAL,GAAY,CAAjB,CAAD,EAAsBC,MAAM,CAACd,CAAD,CAA5B,CAAhB;;AACA,UAAGM,KAAK,KAAK,CAAb,EAAe;AACXI,QAAAA,IAAI,GAAG,KAAP;;AADW,6BAEFL,aAAa,CAACP,CAAD,EAAIC,CAAJ,EAAOF,CAAC,CAACI,CAAD,CAAR,EAAaK,KAAb,EAAoBC,CAApB,CAFX;;AAAA;;AAEVT,QAAAA,CAFU;AAEPC,QAAAA,CAFO;AAGd;AACJ;;AACDY,IAAAA,SAAS,CAACI,IAAV,CAAe;AAACH,MAAAA,KAAK,EAALA,KAAD;AAAQN,MAAAA,KAAK,EAALA;AAAR,KAAf;AACAM,IAAAA,KAAK;AACR;;AACDd,EAAAA,CAAC,CAACiB,IAAF,CAAOhB,CAAP;AACA,SAAO,CAACD,CAAD,EAAIa,SAAJ,CAAP;AACH,CArBM","sourcesContent":["export const ActivationFunction = (x, w, b) => {\r\n    let z = 0;\r\n    for(let i in w){\r\n        z += w[i] * x[i]\r\n    }\r\n    z += b\r\n    return z>0\r\n}\r\n\r\nconst getError = (t, a) => {\r\n    return (t-a)\r\n}\r\n\r\nconst updateWeights = (w, b, x, error, n) => {\r\n    for(let i in w){\r\n        w[i] = w[i] + (n * error * x[i]);\r\n    }\r\n    b += (error * n);\r\n    return [w, b]\r\n}\r\n\r\nexport const Perceptron = ({w, b, n, x, epocas}) => {\r\n    let done = false;\r\n    let z = 0;\r\n    let error = 0;\r\n    let errorData = []\r\n    let epoca = 0;\r\n    while(!done && epoca < epocas){\r\n        done = true;\r\n        for(let i in x){\r\n            z = ActivationFunction(x[i], w, b)\r\n            error = getError(x[i][x[i].length-1], Number(z));\r\n            if(error !== 0){\r\n                done = false;\r\n                [w, b] = updateWeights(w, b, x[i], error, n)\r\n            }\r\n        }\r\n        errorData.push({epoca, error});\r\n        epoca++;\r\n    }\r\n    w.push(b)\r\n    return [w, errorData]\r\n}"]},"metadata":{},"sourceType":"module"}